// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model WaitListUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  linkedinURL String   @unique
  invite      Invites?
}

model Invites {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  inviteKey      String       @unique @default(uuid())
  used           Boolean      @default(false)
  approvedUser   WaitListUser @relation(fields: [approvedUserID], references: [id])
  approvedUserID String       @unique @db.ObjectId
}

model Employer {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String @unique
  password  String
  firstName String
  lastName  String
  inviteKey String @unique
  role      String @default("Employer")
  job       Job[]
}

// Candidate model
model Candidate {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  password         String
  firstName        String
  lastName         String
  role             String            @default("Candidate")
  candidateProfile CandidateProfile?
}

// CandidateProfile model
model CandidateProfile {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  totalExp          Float              @default(0)
  currentCompany    String
  city              String
  candidate         Candidate          @relation(fields: [candidateID], references: [id])
  candidateID       String             @unique @db.ObjectId
  skills            CandidateSkill[]
  previousCompanies CandidateCompany[]
  Response          Response[]
}

// Skill model
model Skill {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String           @unique
  candidates CandidateSkill[]
}

// CandidateSkill intermediate table
model CandidateSkill {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  skill              Skill            @relation(fields: [skillID], references: [id])
  skillID            String           @db.ObjectId
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileID], references: [id])
  candidateProfileID String           @db.ObjectId
}

// Company model
model Company {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  name       String             @unique
  candidates CandidateCompany[]
}

// CandidateCompany intermediate table
model CandidateCompany {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  company            Company          @relation(fields: [companyID], references: [id])
  companyID          String           @db.ObjectId
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileID], references: [id])
  candidateProfileID String           @db.ObjectId
}

// Job model
model Job {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  companyName        String
  location           String
  compensation       String
  jobDescriptionLink String
  additionalInfo     String
  employer           Employer   @relation(fields: [employerID], references: [id])
  employerID         String     @db.ObjectId
  responses          Response[]
}

// Response model
model Response {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  job                Job              @relation(fields: [jobID], references: [id])
  jobID              String           @db.ObjectId
  candidate          CandidateProfile @relation(fields: [candidateProfileID], references: [id])
  candidateProfileID String           @db.ObjectId
}
